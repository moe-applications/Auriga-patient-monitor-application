waveforms = [{2,"SpO2"};{6,"ECG1"};{7,"ECG2"};{8,"ECG3"};{9,"ARR"}];trends = [{1,"tHR"};{19,"tART_S"};{20,"tART_D"};{21,"tART_M"};{31,"tSpO2"}];t = 20 *60;  %time to save in secondsload 201bm.matlen = t /0.008;l = size(waveforms);for i =1 : l(1)  wf = waveforms(i,:);  data = val(wf{1},15:len);  data = data - min(data);  data = data - max(data)/2;  m = std(data) * 3;  data = data/m;  fid = fopen([wf{2} ".dat"],"w");  % fwrite(fid,data,"float32",0,"ieee-be"); % FIXME: in java drop byte order conversion  fwrite(fid,data,"float32")  fclose(fid);  title(wf{2}); end;Name="201bnm"infoName = strcat(Name, '.info');matName = strcat(Name, '.mat');Octave = exist('OCTAVE_VERSION');load(matName);fid = fopen(infoName, 'rt');fgetl(fid);fgetl(fid);fgetl(fid);[freqint] = sscanf(fgetl(fid), 'Sampling frequency: %f Hz  Sampling interval: %f sec');interval = freqint(2);fgetl(fid);if(Octave)    for i = 1:size(val, 1)       R = strsplit(fgetl(fid), char(9));       signal{i} = R{2};       gain(i) = str2num(R{3});       base(i) = str2num(R{4});       units{i} = R{5};    endelse    for i = 1:size(val, 1)      [row(i), signal(i), gain(i), base(i), units(i)]=strread(fgetl(fid),'%d%s%f%f%s','delimiter','\t');    endendfclose(fid);val(val==-32768) = NaN;for i = 1:size(val, 1)    val(i, :) = (val(i, :) - base(i)) / gain(i);endl = size(trends);for i =1 : l(1)  wf = trends(i,:);  data = val(wf{1},1:t);  fid = fopen([wf{2} ".dat"],"w");  % fwrite(fid,data,"float32",0,"ieee-be"); % FIXME: in java drop byte order conversion  fwrite(fid,data,"float32")  fclose(fid); end;